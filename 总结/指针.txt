我们将内存中字节的编号称为地址（Address）或指针（Pointer）

定义指针变量 : datatype *name;
           or datatype *name=value;
 datatype(函数类型) 如int double 
 name (函数名)
 value(某个变量) 如&a(一定要带&)
 
注意:定义时带* 赋值不用带*

地址占位符  %#X
-------------------------------------
※  
*p++等于*(p++)修改了指针的值使其不指向a

-------------------------------------
引入数组指针后，有两种方案访问数组元素，使用下标，使用指针。
1) 使用下标
也就是采用 arr[i] 的形式访问数组元素。
如果 p 是指向数组 arr 的指针，那么也可以使用 p[i] 来访问数组元素，它等价于 arr[i]。
2) 使用指针
也就是使用 *(p+i) 的形式访问数组元素。
另外数组名本身也是指针，也可以使用 *(arr+i) 来访问数组元素，它等价于 *(p+i)。

不管是数组名还是数组指针，都可以使用上面的两种方式来访问数组元素。
不同的是，数组名是常量，它的值不能改变，而数组指针是变量（除非特别指明它是常量），它的值可以任意改变。
也就是说，数组名只能指向数组的开头，而数组指针可以先指向数组开头，再指向其他元素。

更改上面的代码，借助自增运算符来遍历数组元素：
#include <stdio.h>

int main(){

    int arr[] = { 99, 15, 100, 888, 252 };
    int i, *p = arr, len = sizeof(arr) / sizeof(int);
 
    for(i=0; i<len; i++)
    {
        printf("%d  ", *p++ );
    }
 
    printf("\n");
 
    return 0;
}